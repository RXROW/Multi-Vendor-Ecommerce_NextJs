generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  couponCode String
  createdAt  DateTime @default(now()) @db.Date  
  expiryDate DateTime @db.Date
  isActive   Boolean  
  title      String  
  updatedAt  DateTime @default(now()) @updatedAt @db.Date  
}

// --ESLAM--
// Relationships  
// One-to-one relationship: user => profile relation
// One-to-many: category => product relation
// Many-to-many: market => category relation

// User roles: Admin, User, Supplier, Moderator

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  isActive    Boolean

  products    Product[]
  trainings   Training[]

  marketIds   String[] @db.ObjectId
  markets     Market[] @relation(fields: [marketIds], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Market {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  logoUrl     String?
  description String?
  isActive    Boolean

  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String   @unique
  imageUrl        String?
  description     String?
  isActive        Boolean
  sku             String?
  barcode         String?
  productPrice    Float
  salePrice       Float
  tags            String[]

  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String   @db.ObjectId

  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId

  supplierProfile SupplierProfile? @relation(fields: [supplierProfileId], references: [id])
  supplierProfileId String? @db.ObjectId

  createdAt       DateTime @default(now())
  updatedAt       DateTime? @updatedAt
}

model Training {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  content     String?
  isActive    Boolean

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
}

enum UserRole {
  ADMIN
  USER
  SUPPLIER
  MODERATOR
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?

  products      Product[]
  role          UserRole       @default(USER)
  supplierProfile SupplierProfile?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SupplierProfile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  code            String
  profileImageUrl String?
  email           String
  name            String
  notes           String?
  phone           String
  physicalAddress String?
  terms           String?
  isActive        Boolean
  mainProduct     String
  products        String[]
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Product   Product[]
}
