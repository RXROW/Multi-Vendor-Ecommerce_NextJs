// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Coupon {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  link      String
  imageUrl  String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// RelationShip

// 1 to 1 relationship --user =>profile
// 1 to many relationship category=>product
// many to many relationship market => category

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String 
  slug       String @unique
  imageUrl  String?
  description String?
  isActive Boolean
  
  products  Product[]
  trainings Training[] 

  marketIds String[] @db.ObjectId
  markets   Market[]   @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}


model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String 
  slug        String @unique
  logoUrl     String?
  description String?
  isActive    Boolean
  
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}



model Product {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String @unique
  sku            String?
  barcode        String?
  productCode    String?
  unit           String?
  productPrice   Float
  salePrice      Float?
  wholesalePrice Float?
  wholesaleQty   Int?
  productStock   Int
  qty            Int
  imageUrl       String?
  tags           String[]
  description    String?
  isActive       Boolean
  isWholesale    Boolean
  
  categoryId String @db.ObjectId
  category   Category  @relation(fields: [categoryId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id],onDelete: Cascade, onUpdate: Cascade)
  

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  OrderItem OrderItem[]
}


model Training{
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String 
  slug         String @unique
  imageUrl     String?
  description  String?
  content      String?
  isActive     Boolean
  categoryId String @db.ObjectId
  category   Category?  @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
      
}

enum UserRole{
  ADMIN
  USER
  SUPPLIER
  MODERATOR
}



// User =>Admin,Supplier,Customer,Agent,
model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?   @unique
  password         String   
  emailVerified    DateTime?
  products  Product[]
  role             UserRole  @default(USER)  
  supplierProfile  SupplierProfile?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  orders Order[] 
}


model SupplierProfile {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  phone                String
  email                String
  profileImageUrl      String?
  physicalAddress      String?
  terms                String?
  notes                String?
  code                 String
  products             String[]
  isActive             Boolean   @default(true)
  mainProduct          String?
  userId               String?   @db.ObjectId @unique
  user                 User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  createdAt            DateTime  @default(now())
  updatedAt            DateTime? @updatedAt
}




model Staff {
  id               String      @id  @map("_id")
  name             String
  nin              String
  dob              DateTime
  password         String
  email            String   @unique
  phone            String
  physicalAddress  String
  notes            String?
  isActive         Boolean  @default(true)
  code             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}



model Order {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId @unique
  fristName      String
  lastName       String
  emailAddress   String
  phoneNumber    String
  streetAddress  String
  city           String
  country        String
  district       String
  shippingCost   Float
  orderStatus    OrderStatus @default(PROCESSING) // Set PROCESSING as the default value
  paymentMethod  String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItem OrderItem[]
}
// Add this enum at the top-level of your schema
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model OrderItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String    @db.ObjectId
  productId   String    @db.ObjectId
  quantity    Int
  price       Float
  imageUrl    String? 
  title       String?
  orderNumber String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  order       Order     @relation(fields: [orderId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
}